# Generated by Django 4.2.3 on 2024-07-31 19:16

import core.models
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ContactSupport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("datetime_created", models.DateTimeField(auto_now_add=True)),
                ("last_edited", models.DateTimeField(auto_now=True)),
                ("is_removed", models.BooleanField(default=False)),
                ("email", models.EmailField(max_length=254)),
                ("description", models.TextField(max_length=1500)),
            ],
            options={
                "verbose_name_plural": "Support Messages",
                "ordering": ["-datetime_created"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists"
                        },
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "That username already exists"},
                        max_length=30,
                        unique=True,
                    ),
                ),
                ("first_name", models.CharField(max_length=30)),
                ("last_name", models.CharField(max_length=150)),
                (
                    "is_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Gives Users access to the Admin Dashboard",
                        verbose_name="admin",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into Django Admin.",
                        verbose_name="staff",
                    ),
                ),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Users",
                "ordering": ["email"],
                "permissions": (("can_access_settings", "Can access settings"),),
            },
            managers=[
                ("objects", core.models.CustomUserManager()),
            ],
        ),
    ]
